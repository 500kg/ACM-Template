#define clr(a,x) memset(a,x,sizeof(a));
const int INF = 0x3f3f3f3f;
const int maxn = 1 << 10;
typedef long long ll;
struct Edge
{
	int from, to, cap, flow, cost;
	Edge(int u, int v, int c, int f, int w)
		: from(u), to(v), cap(c), flow(f), cost(w) {}
};
struct MCMF
{
	int n, m;
	vector<Edge> edges;
	vector<int> G[maxn];
	int inq[maxn]; //是否在队列中
	int d[maxn];   //bellmanford
	int p[maxn];   //上一条弧
	int a[maxn];   //可改进量
	void init(int n)
	{
		this->n = n;
		for (int i = 0; i < n; i++) G[i].clear();
		edges.clear();
	}
	void AddEdge(int from, int to, int cap, int cost)
	{
		edges.push_back(Edge(from, to, cap, 0, cost));
		edges.push_back(Edge(to, from, 0, 0, -cost));
		m = edges.size();
		G[from].push_back(m - 2);
		G[to].push_back(m - 1);
	//	cout << from << ' ' << to << endl;
	}
	bool BellmanFord(int s, int t, int& flow, ll& cost)
	{
		for (int i = 0; i < n; i++) d[i] = INF;
		clr(inq, 0);
		d[s] = 0;
		inq[s] = 1;
		p[s] = 0;
		a[s] = INF;
		queue<int> q;
		q.push(s);
		while (!q.empty())
		{
			int u = q.front();
			q.pop();
			inq[u] = 0;
			for (int i = 0; i < G[u].size(); i++)
			{
				Edge& e = edges[G[u][i]];
				if (e.cap > e.flow && d[e.to] > d[u] + e.cost)
				{
					d[e.to] = d[u] + e.cost;
					p[e.to] = G[u][i];
					a[e.to] = min(a[u], e.cap - e.flow);
					if (!inq[e.to])
					{
						q.push(e.to);
						inq[e.to] = 1;
					}
				}
			}
		}
		if (d[t] == INF) return false; // 当没有可增广的路时退出//（INF改为>0就是可行流）
		flow += a[t];
		cost += (ll)d[t] * (ll)a[t];
		for (int u = t; u != s; u = edges[p[u]].from)
		{
			edges[p[u]].flow += a[t];
			edges[p[u] ^ 1].flow -= a[t];
		}
		return true;
	}
	int MincostMaxflow(int s, int t, ll& cost)
	{
		int flow = 0;
		cost = 0;
		while (BellmanFord(s, t, flow, cost));
		return flow;
	}
}S;